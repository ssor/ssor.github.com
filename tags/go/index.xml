<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on 我思故我在</title>
    <link>http://ssor.github.io/tags/go/index.xml</link>
    <description>Recent content in Go on 我思故我在</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://ssor.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>后台开发选择了 Go 语言</title>
      <link>http://ssor.github.io/post/why_use_golang_for_backend/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://ssor.github.io/post/why_use_golang_for_backend/</guid>
      <description>&lt;p&gt;经过认真思考, 还是选择了 Go 作为主力开发语言
&lt;/p&gt;

&lt;p&gt;后台开发语言的可选项很多, 最没有错误的选择是 Java, 还有 JVM 平台的其它言语 Scala, closure也有大牛在用, 尽管如此, 这些语言各自存在着不同的问题. 与此同时, 也有很多的新语言不断涌现, 试图解决之前语言在开发中遇到的问题. 新语言的问题在于尚未经过时间的检验, 对于产品的开发可能存在风险, 因此需要在风险和新语言的特性之前做出权衡. 我们遇到的是 Go 语言与其它语言.&lt;/p&gt;

&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;

&lt;h3 id=&#34;开源&#34;&gt;开源&lt;/h3&gt;

&lt;p&gt;一定要选择开源的编程语言. 不是因为可以自己往语言里加自己想要的特性, 而是因为, 无论在什么情况下, 不会突然发生语言无人维护的情况; 如果官方放弃该语言, 在确实需要的情况下, 可以自行维护, 保证对已开发系统的支持.&lt;/p&gt;

&lt;h3 id=&#34;设计简单&#34;&gt;设计简单&lt;/h3&gt;

&lt;p&gt;代码直观, 没有各种类的理论的设定, 没有各种看起来很有效率的特性, 代码阅读更流畅, 很难产生误解, 易于维护.&lt;/p&gt;

&lt;h3 id=&#34;快速的静态编译&#34;&gt;快速的静态编译&lt;/h3&gt;

&lt;p&gt;在构建复杂的后端系统时, 在当前阶段, 静态编译在消除隐藏问题方面有着很大的优势, 可以减少大量的测试, 保证系统稳定的同时, 极大的提高开发效率.&lt;/p&gt;

&lt;h3 id=&#34;跨平台编译&#34;&gt;跨平台编译&lt;/h3&gt;

&lt;p&gt;系统的部署一直是个很大的问题, 世界上最好的语言 PHP 之所以最好有一部分原因是跨平台, 在 windows 下开发完成后, 直接部署在 linux 服务器上, 表现基本一致. 相比来说, Go 在这方面的优势只大不小. 在 macOS 上开发完成后, 可以直接编译为 linux 上运行的二进制包, 跨平台表现的一致性更强. 同样的系统不需要任何修改就可以跨平台运行, 极大的降低了开发成本.&lt;/p&gt;

&lt;h3 id=&#34;健壮全面的标准库&#34;&gt;健壮全面的标准库&lt;/h3&gt;

&lt;p&gt;Go 的发布同时带来了健壮齐全的标准库, 一般的系统都不需要额外的外部库依赖, 对生态发展的依赖性极低. 标准库的维护和升级兼容性工作由设计者维护, 保证了系统升级时的稳定可靠.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>