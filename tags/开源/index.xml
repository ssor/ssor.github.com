<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源 on 我思故我在</title>
    <link>http://ssor.github.io/tags/%E5%BC%80%E6%BA%90/index.xml</link>
    <description>Recent content in 开源 on 我思故我在</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://ssor.github.io/tags/%E5%BC%80%E6%BA%90/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>提倡公司开源运动</title>
      <link>http://ssor.github.io/post/the_open_source_for_company/</link>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ssor.github.io/post/the_open_source_for_company/</guid>
      <description>&lt;p&gt;为什么要在公司技术管理上提倡开源, 如何开源
&lt;/p&gt;

&lt;h2 id=&#34;原因&#34;&gt;原因&lt;/h2&gt;

&lt;p&gt;保证技术公司拥有强劲竞争力的方法是拥有一支高水平的技术团队.  打造这样高水平的团队有几个方法:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;高水平的招聘&lt;/li&gt;
&lt;li&gt;自行培养&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第一个方法优点是直观简单,  但也有缺陷:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代价高昂&lt;/li&gt;
&lt;li&gt;很难招&lt;/li&gt;
&lt;li&gt;合作难&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;战略上来说第二种方法几乎没有第一种方法的缺点, 除了时间较长外, 显然更加最合适.&lt;/p&gt;

&lt;p&gt;那么应该如何培养呢? 这里有克服几个问题:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;什么是更好的技术人要客观, 不能几个人说了算, 评价标准必须客观&lt;/li&gt;
&lt;li&gt;不能敝帚自珍, 多接触圈内的高手才能意识到自己的不足和努力的方向, 才有可能提高自己的技术水平&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;怎么解决这些问题? 从外部请专家? 定期交流? 多参加技术交流大会? 这些方式不仅效率低, 效果也不是很好. 其实最好的方式就是开源.&lt;/p&gt;

&lt;h2 id=&#34;什么是开源&#34;&gt;什么是开源&lt;/h2&gt;

&lt;p&gt;开源不是简单的把自己的代码放到 GitHub 上, 让所有人都可以访问. 开源的目标是和所有人互动.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;把自己的代码整理好, 包括代码和相关文档, 可以让其他人参与进项目本身&lt;/li&gt;
&lt;li&gt;参与别人的项目, 贡献自己的想法和代码&lt;/li&gt;
&lt;li&gt;多听取意见, 然后自己决定&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;开源的忧虑&#34;&gt;开源的忧虑&lt;/h2&gt;

&lt;p&gt;开源让很多公司的管理者产生很多忧虑:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;如果代码别人都知道了, 那竞争对手是不是就可以复制我, 然后和我竞争了?&lt;/li&gt;
&lt;li&gt;系统的漏洞是不是就暴露出来了? 这样会不会影响公司发展?&lt;/li&gt;
&lt;li&gt;团队搞开源, 放在业务上的精力变少了, 那公司还怎么发展?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;慢慢来解释这些问题.&lt;/p&gt;

&lt;h3 id=&#34;1-代码的开放&#34;&gt;1. 代码的开放&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;如果竞争对手只是把你的系统运转起来就能和你竞争, 那说明你的产品本身竞争力就不强&lt;/li&gt;
&lt;li&gt;即使没有你的代码, 人家一样和你竞争, 只要你的技术不是独一无二的, 就不存在什么大的门槛.&lt;/li&gt;
&lt;li&gt;让你时刻意识到公司的竞争力不在几行代码上, 而在产品和服务上, 认真做好产品和服务才是根本&lt;/li&gt;
&lt;li&gt;如果能吸引到公司外的人贡献代码, 那就等于有人免费为公司工作&lt;/li&gt;
&lt;li&gt;多个人多一条思路, 系统的功能和性能方面可能有意外的收获&lt;/li&gt;
&lt;li&gt;多人的参与, 正常情况下, 代码质量会更高&lt;/li&gt;
&lt;li&gt;如果有人离职了, 从代码贡献者里面直接找一个替代&lt;/li&gt;
&lt;li&gt;发现有人对部分代码特别感兴趣, 直接招聘他进公司&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;2-为系统漏洞付出的代价更小&#34;&gt;2. 为系统漏洞付出的代价更小&lt;/h3&gt;

&lt;p&gt;如果系统本身存在漏洞, 黑客迟早会抓住这个机会. 如果能因为开放代码使得有人能提前提出这个漏洞, 最终的损失会更小&lt;/p&gt;

&lt;h3 id=&#34;3-业务更高效&#34;&gt;3. 业务更高效&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;团队要和更多人交流, 必须水平要高, 逼迫团队不断提高技术水平&lt;/li&gt;
&lt;li&gt;团队水平提高, 完成同样工作的时间缩短, 出错概率降低, 质量反而提高&lt;/li&gt;
&lt;li&gt;团队更快乐, 共有技术氛围, 团队更稳定&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;如何开源起来&#34;&gt;如何开源起来&lt;/h2&gt;

&lt;h3 id=&#34;尽量的开源纯技术方面的代码&#34;&gt;尽量的开源纯技术方面的代码&lt;/h3&gt;

&lt;p&gt;将业务无关的代码整理成清晰的模块和项目, 写好必要的说明文档, 放到 GitHub 上&lt;/p&gt;

&lt;h3 id=&#34;为使用的开源代码贡献代码&#34;&gt;为使用的开源代码贡献代码&lt;/h3&gt;

&lt;p&gt;如果使用的开源代码缺少自己需要的功能, 或者使用过程中发现 Bug 存在, 将功能代码添加进去, 或者修改 bug, 发 PR 给代码 owner&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>