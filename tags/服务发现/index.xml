<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>服务发现 on 我思故我在</title>
    <link>//localhost:1313/tags/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/index.xml</link>
    <description>Recent content in 服务发现 on 我思故我在</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="//localhost:1313/tags/%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Consul在服务发现中的应用</title>
      <link>//localhost:1313/post/how_to_use_consul/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/post/how_to_use_consul/</guid>
      <description>&lt;p&gt;Consul的基本原理及其在服务发现中的使用&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;服务发现&#34;&gt;服务发现&lt;/h2&gt;

&lt;p&gt;服务发现,通俗的讲,就是通过关键字查询特定的服务.&lt;/p&gt;

&lt;h2 id=&#34;服务发现的意义&#34;&gt;服务发现的意义&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果服务本身发生了变化, 只需要更新服务即可, 与服务相关的关键字不变, 因此服务的使用者不需要关心该变化&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;服务进行升级后, 如果服务要求的参数不变(平滑升级可以做到), 服务使用者只需要用新的关键字替换之前的关键字即可&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;同一个服务的多个版本可以同时存在, 使用者可以根据需求方便的切换版本&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;consul-是什么&#34;&gt;Consul 是什么&lt;/h2&gt;

&lt;p&gt;Consul是 &lt;a href=&#34;https://www.hashicorp.com/&#34;&gt;HashiCorp&lt;/a&gt;开发的用于服务发现的系统. 它的主要特性有:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;支持通过 DNS 和 HTTP 发现服务&lt;/li&gt;
&lt;li&gt;提供服务的健康检查&lt;/li&gt;
&lt;li&gt;键值存储&lt;/li&gt;
&lt;li&gt;多数据中心&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过服务发现的方式为使用者提供服务, 稳定是最重要的考虑因素, Consul 的去中心化的多节点提供稳定的服务. 同时因为健康检查的存在, 可以保证服务的有效性.&lt;/p&gt;

&lt;h2 id=&#34;consul-的部署&#34;&gt;Consul 的部署&lt;/h2&gt;

&lt;h3 id=&#34;说明&#34;&gt;说明&lt;/h3&gt;

&lt;p&gt;每台服务器上至少有一个 Consul 的节点( Agent ), 节点有两种模式: 服务器模式和客户端模式.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;服务器模式提供服务注册和查找等功能, 是 Consul 去中心化的关键节点,推荐至少部署三个节点.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;客户端模式负责转发服务请求到服务器模式的节点.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于两种模式的节点负责功能的不同, 可以假设客户端模式的节点是稳定存在的, 而服务器模式的节点可能会异常退出.&lt;/p&gt;

&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;

&lt;p&gt;根据系统&lt;a href=&#34;https://www.consul.io/downloads.html&#34;&gt;下载&lt;/a&gt;合适的版本, 并解压至合适的目录.&lt;/p&gt;

&lt;p&gt;假设有4台服务器, IP分别为 &lt;strong&gt;172.16.1.34&lt;/strong&gt;, &lt;strong&gt;172.16.1.35&lt;/strong&gt;, &lt;strong&gt;172.16.1.37&lt;/strong&gt;, &lt;strong&gt;172.16.1.69&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们将在 34, 35, 69 上启动服务器模式节点, 在37上启动客户端模式节点, 启动命令如下:&lt;/p&gt;

&lt;h5 id=&#34;34&#34;&gt;34&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;./consul agent -server -bootstrap-expect=3 -node=agent34 -data-dir=./ &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;35&#34;&gt;35&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt; ./consul agent -server -bootstrap-expect=3 -node=agent35 -data-dir=./ &amp;amp;  
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;69&#34;&gt;69&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt; ./consul agent -server -bootstrap-expect=3 -node=agent69 -data-dir=./ &amp;amp;  
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;37&#34;&gt;37&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt; ./consul agent  -node=agent37 -retry-join=172.16.1.35 -data-dir=./ &amp;amp; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在35和34服务器上运行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ./consul join 172.16.1.69 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;三个服务器模式节点将选出一个 leader, 服务启动完成.&lt;/p&gt;

&lt;p&gt;查看一下节点状态, 运行命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ./consul members 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果类似如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Node     Address           Status  Type    Build  Protocol  DC
agent34  172.16.1.34:8301  alive   server  0.7.2  2         dc1
agent35  172.16.1.35:8301  alive   server  0.7.2  2         dc1
agent37  172.16.1.37:8301  alive   client  0.7.2  2         dc1
agent69  172.16.1.69:8301  alive   server  0.7.2  2         dc1

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;

&lt;h5 id=&#34;使用http-api&#34;&gt;使用HTTP API&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注册服务 &lt;a href=&#34;https://www.consul.io/docs/agent/http/agent.html#agent_service_register&#34;&gt;/v1/agent/service/register&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查找服务 &lt;a href=&#34;https://www.consul.io/docs/agent/http/health.html#health_service&#34;&gt;/v1/health/service/&lt;service&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;使用-sdk&#34;&gt;使用 SDK&lt;/h5&gt;

&lt;p&gt;系统中使用 Consul 需要对其 HTTP API 进行封装, 因此可以直接使用官方封装的 Go 版的 SDK&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;注册服务 参考&lt;a href=&#34;https://github.com/ssor/consul_service_reg/blob/master/main.go&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;查找服务 参考&lt;a href=&#34;https://github.com/ssor/consul_query_service_example/blob/master/main.go&#34;&gt;代码&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;基本的使用方法介绍完毕, 下一步将对实际工程中的使用问题进行补充&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>