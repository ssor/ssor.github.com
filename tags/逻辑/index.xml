<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>逻辑 on 我思故我在</title>
    <link>http://ssor.github.io:1313/tags/%E9%80%BB%E8%BE%91/index.xml</link>
    <description>Recent content in 逻辑 on 我思故我在</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://ssor.github.io:1313/tags/%E9%80%BB%E8%BE%91/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>不用逻辑流程图交流思想</title>
      <link>http://ssor.github.io:1313/post/do_not_use_logic_flow_chart/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://ssor.github.io:1313/post/do_not_use_logic_flow_chart/</guid>
      <description>&lt;p&gt;逻辑流程图是人与人之间交流的障碍&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;什么是逻辑流程图&#34;&gt;什么是逻辑流程图&lt;/h2&gt;

&lt;p&gt;用图表示的算法就是流程图。流程图是用一些图框来表示各种类型的操作，在框内写出各个步骤，然后用带箭头的线把它们连接起来，以表示执行的先后顺序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://ssor.github.io:1313/img/logic_flow.gif&#34; alt=&#34;流程图样例&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;为什么不用逻辑流程图&#34;&gt;为什么不用逻辑流程图&lt;/h2&gt;

&lt;p&gt;我非常讨厌那些看似工工整整的流程图, 因为:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果我获取其中所要表达的意思, 那我必须仔细的去思考里面的是否条件, 记住一整套的逻辑, 最后才能在脑中构建起一长串的意思.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;更让我讨厌的是, 如果过一段时间其中任何一个环节忘记了, 那基本需要重新来一遍.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果想要对别人描述一下里面的内容, 那就必须从头到尾说一遍, 而且因为分支的原因, 在描述过程中必须有一系列的分支点, 万一听你描述的人把其中的一个分支点忘记了, 那么, 好吧, 把这个分支节点之前的逻辑重新讲一遍.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为什么会是这样?&lt;/p&gt;

&lt;h3 id=&#34;逻辑是计算机的思维方式&#34;&gt;逻辑是计算机的思维方式&lt;/h3&gt;

&lt;p&gt;计算机因为基于电子正负特性, 最底层的逻辑只有是否两种, 因此为了让计算机识别复杂的逻辑, 必须将复杂逻辑转换成基本的是否逻辑. 从这个角度来说, 是否逻辑是计算机的逻辑. 可以说, 逻辑流程图的出现是历史原因造成的.&lt;/p&gt;

&lt;p&gt;计算机刚出现的时候, 计算机语言相对比较难懂, 需要专门经过训练的人, 才能编写出计算机能识别的代码. 只是编写能让计算机识别的代码就如此困难, 因此很难将算法的设计工作也放到同一个人身上. 在这种情况下, 社会分工协作导致出现了专门的计算机工程师和算法设计师. 算法设计师表达算法的最合适的方式, 就是尽量让计算机工程师不需要思考太多,就可以按照表达式翻译成计算机代码, 从而在整体效率上达到最优. 这个表达方式就是逻辑流程图.&lt;/p&gt;

&lt;p&gt;逻辑流程图使用是否分支描述复杂的逻辑, 因为非常接近计算机的思维方式 所以很容易翻译成计算机能识别的逻辑. 对于软件的思路描述, 普通的编程语言都具有基本的逻辑关键字, 一个基本掌握该语言的程序员, 将流程图一步一步的翻译成代码, 然后编译成软件, 就可以完成编程任务了.&lt;/p&gt;

&lt;p&gt;逻辑流程图流传到现在慢慢地出现了问题. 随着计算机技术的发展, 出现了很多高级编程语言, 能够让普通人完成之前需要经过专业训练才能完成的编码工作. 因此, 原来专门负责将算法翻译成代码的工作大部分其实已经消失, 现在的计算机工程师已经是之前计算机工程师和算法设计师的合体. 现在的软件工程师面对的是功能性的需求, 了解了需求后, 软件工程师负责设计算法, 并通过软件的方式展现结果. 一般需求的提出者是人, 也就是说软件工程师交流的对象是人, 这和之前计算机工程师与算法设计师的交流根本不是一个层次, 从这个角度来说, 不经思考的沿用之前的交流方式的话, 就是现实版的刻舟求剑了.&lt;/p&gt;

&lt;p&gt;如果我们把需求提出方设定为产品经理, 那么, 逻辑流程图到底适不适合产品经理与软件工程师的交流呢? 这需要从职能方面来分析. 一般来说, 产品经理经过对业务的分析, 提出了一个软件应有的表现, 也就是规定了软件的用户进行相关操作后, 软件应该输出怎样的结果, 即产品经理提出了一个输入输出的定义, 中间的实现过程并不关心. 负责实现的是软件工程师. 分析后发现, 产品经理所描述的软件动作, 不重实现, 而重表现. 对产品经理来说, 只要一个列表的结构, 就能表达出完整的需求, 里面没有逻辑. 如果产品本身有一定的逻辑, 这个逻辑也可以转成简单的列表. 综合以上分析, 逻辑流程图其实并不适合作为交流中间形式.&lt;/p&gt;

&lt;h3 id=&#34;人类的思维方式是概念抽象思维&#34;&gt;人类的思维方式是概念抽象思维&lt;/h3&gt;

&lt;p&gt;人类的最强大的思维方式是抽象思维. 人类大脑不擅长处理长串列表, 而通过抽象思维, 可以将列表分类抽象, 最后通过类似树形的方式进行高效处理, 其中所谓的归类我们一般称之为概念. 通过定义一系列的概念, 及其相互之间的关系, 构造出对事物理解的模型, 大脑通过对模型的认识和思考和现实世界进行交互. 通过不断的更新概念体系, 更新模型运转逻辑, 不断的逼近现实世界, 通过这种方式, 理论上, 人类最终可以真正的认清现实世界.&lt;/p&gt;

&lt;p&gt;在长期的进化和练习后, 人类大脑可以高效的通过概念进行交流.&lt;/p&gt;

&lt;h2 id=&#34;应该用什么交流&#34;&gt;应该用什么交流&lt;/h2&gt;

&lt;p&gt;用文字描述. 通过语言的描述, 并且通过落实到具体的文字, 加强描述的精确性; 如果要求再高, 那就是通过给不同的人讲解, 通过人是否容易理解文字所描述的意义来测试文字描述是否清晰.&lt;/p&gt;

&lt;p&gt;另外, 如果功能上对具体的数字有要求, 建议增加测试用例, 软件开发完成后, 通过数据进行最终的判定, 保证功能开发符合需求&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>